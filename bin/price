#!/usr/bin/env perl

use strict;
use warnings;
use utf8;
use feature qw(say);

no warnings 'utf8';

use Getopt::Long;
use Pod::Usage;
use Term::ANSIColor;

use lib './lib';

use Get::Article;
use Get::Article::Exchange;
use Get::Article::Currency;
use Get::Article::Google;

use Mojo::UserAgent;

# Debug
use Data::Dumper;

my $options = {
               article => {
                           jaro       => 0.8,
                           token_dist => 3,
                           token_perc => 30,
                           nfkd       => 1,
                           price      => 1,
                          },
               others => {
                          verbose    => 0,
                          down_image => 1,
                          sql        => 0,
                          websites   => 4,
                          contents   => 5,
                          color      => 1,
                          retries    => 3,
                          currency   => '',
                         },
               mojo_ua => {
                           proxy           => '',
                           connect_timeout => 10,
                           max_redirects   => 0,
                           request_timeout => 0,
                          },
              };

my $warn = sub {
   my $string = $_[0];

   $string =~ s/(?::.+)?\s*at.+//s;
   $string = colored("$string, retrying...", 'red') if $options->{others}{color};
   warn "$string\n";
};

my $die = sub {
   $warn->($_[0]);
   pod2usage(1) if $_[1];
   exit 1;
};

sub color_this {
   my $string = $_[0];
   $string = colored($string, 'green') if $options->{others}{color};
   return $string;
}

sub proxy {
   $_[1] =~ m{^socks://[^:]+(?::\d+)?$} or $die->('invalid proxy url');
   $options->{mojo_ua}{proxy} = $_[1];
}

sub jaro {
   0.7 < $_[1] <= 1 or $die->('min jaro: 0.7, max jaro: 1');
   $options->{article}{jaro} = $_[1];
}

sub currency {
   exists $Get::Article::Currency::CODES{uc $_[1]} or $die->('unknown currency osi codes');
   $options->{others}{currency} = uc $_[1];
}

GetOptions(
           'p|proxy=s'           => \&proxy,
           'j|min-jaro=f'        => \&jaro,
           'h|help'              => \&pod2usage,
           'r|retries=i'         => \$options->{others}{retries},
           'sq|sql-insert=s'     => \$options->{others}{sql},
           'price!'              => \$options->{article}{price},
           'v|precision=i'       => \$options->{article}{token_dist},
           'l|involve=i'         => \$options->{article}{token_perc},
           's|sensitive'         => \$options->{article}{nfkd},
           'i|in=s'              => \&currency,
           'verbose'             => \$options->{others}{verbose},
           'w|number-websites=i' => \$options->{others}{websites},
           'd|download-image'    => \$options->{others}{down_image},
           'color!'              => \$options->{others}{color},
           'n|number-contents=i' => \$options->{others}{contents},
           'mr|max-redirect=i'   => \$options->{mojo_ua}{max_redirects},
           'ct|con-timeout=i'    => \$options->{mojo_ua}{connect_timeout},
           'rt|req-timeout=i'    => \$options->{mojo_ua}{request_timeout},
          )
  or pod2usage(1);

$options->{others}{help} and pod2usage(1);
@ARGV or $die->('please specify an article name');

# langauges using `.' as radix character
my $lang_re = do {
   local $" = '|';

   my @dot = qw(
      ak am ar az bs ca zh cs da
      fi fr ka de el he hi hu is
      kn kk km ko ku lv lt mk ms
      mn no fa pl pt ro ru sr sk
      sv ta te th tr uk ur vi cy
      nl en et id it ja ml mt mr
      sl es sw
   );

   qr{^(?:@dot)$};
};

my $ua     = Mojo::UserAgent->new;
my $google = Get::Article::Google->new($ua);
my $art    = Get::Article->new;

length $options->{mojo_ua}{$_} and $ua->$_($options->{mojo_ua}{$_}) foreach keys %{$options->{mojo_ua}};
$options->{others}{retries} = 3 if $options->{others}{retries} < 0;

ARTICLE: foreach my $article (@ARGV) {
   my $tries = -1;

   $art->article($article);
   say color_this("[article]:") . " working on '$article'" if $options->{others}{verbose};

   while () {
      my $status = 0;

      $options->{others}{websites} = 4 if $options->{others}{websites} <= 0;
      eval { $status = $google->google($article, $options->{others}{websites}) };
      $status ? last : next ARTICLE unless $@;

      ++$tries == $options->{others}{retries} and exit 1;
      $warn->($@);
   }

 LINK: while (my $link = $google->next) {
      my $contents;

      say color_this('[website]: ') . $link if $options->{others}{verbose};
      while () {
         eval { $contents = $google->get_contents };
         $contents ? last : next LINK unless $@;
         ++$tries == $options->{others}{retries} and exit 1;
         $warn->($@);
      }

      my $lang = $contents->{lang};
      $art->contents($contents->{text});
      $contents = $art->search_article(%{$options->{article}});

      next unless defined $contents;
      my $desc = (
                  sort { $a->[0] <=> $b->[0] || $b->[1]{jaro} <=> $a->[1]{jaro} || $b->[1]{score} <=> $a->[1]{score} }
                  map  { [length($_->{short}), $_] } @$contents
                 )[0][1];

      if ($options->{article}{price}) {
         local *_ = \$desc->{price};

         s/\s+/_/g;
         $lang =~ $lang_re ? s/,/_/g : s/,/./;

         # currency conversion?
         if ($options->{others}{currency}) {
            my $from = $desc->{price};

            if (exists $Get::Article::Currency::SYMBOLS{$desc->{price}[1]}) {
               my $codes = $Get::Article::Currency::SYMBOLS{$desc->{price}[1]};
               $from = @$codes = 1 ? $codes->[0] : undef;
            }

            if (defined($from) && $from ne $options->{others}{currency}) {
               say color_this("[currency]: ") . "from '$desc->{price}[1]' to '$options->{others}{currency}'"
                 if $options->{others}{verbose};

               my $price;
               my $exchange = Get::Article::Exchange->new($ua);
               while () {
                  eval { $price = $exchange->convert($desc->{price}->[0], $from, $options->{others}{currency}) };
                  last unless $@;
                  ++$tries == $options->{others}{retries} and exit 1;
                  $warn->($@);
               }

               $desc->{price} = [$price, $options->{others}{currency}] if $price != -1;
            }
         }
      }

      if ($options->{others}{sql}) {
         say "INSERT INTO $options->{others}{sql} () VALUES ()";
      }
      else {
         say color_this("Short Description");
         say $desc->{short};
         say color_this("Long Description");
         say $desc->{long};
         say color_this("Price: "), $desc->{price}[2] ? @{$desc->{price}}[1,0] : @{$desc->{price}}[0,1]
           if $options->{article}{price};
      }
   }
}

=encoding utf8

=head1 NAME

price - simple article price and description fetcher

=head1 SYNOPSIS

price [options] article_name

=head1 DESCRIPTION

description here

=head1 OPTIONS

options doc here

=head1 BUGS

Report bugs at C<https://github.com/tcheukueppo/price/issues>.

=head1 AUTHORS

Kueppo Tcheukam - C<tcheukueppo@tutanota.com>

=cut

1;
